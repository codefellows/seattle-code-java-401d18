/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package demo;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;

import com.google.gson.Gson;

public class App {
    public static void main(String[] args) {
        String apiUrl = "http://numbersapi.com/42?json";

        try {
            URL url = new URL(apiUrl);
            String json = getJsonFromApiBetter(url);
            NumberTrivia trivia = getTriviaFromJson(json);

        } catch (MalformedURLException e) {
            e.printStackTrace();
            System.out.println("Bad url");

        } catch (IOException e) {
            e.printStackTrace();
            System.out.println("Problem with the API");
        }
    }


    public static String getJsonFromApi(String apiUrl) {
        try {
            URL url = new URL(apiUrl);

            HttpURLConnection connection = (HttpURLConnection) url.openConnection();

            connection.setRequestMethod("GET");
            connection.setRequestProperty("User-Agent", "PostmanRuntime/7.11.0");
            connection.setRequestProperty("Authorization", "Token token=\"68862dd9d01b9a468e77cc8fab4895da\"");

            int status = connection.getResponseCode();
            System.out.println(status);

            if (status == 200) {

                InputStream inputStream = connection.getInputStream();
                InputStreamReader inputStreamReader = new InputStreamReader(inputStream);
                BufferedReader reader = new BufferedReader(inputStreamReader);

                // could also be written as one big long line
//                BufferedReader myreader = new BufferedReader(new InputStreamReader(connection.getInputStream()));

                String contents = "";
                String currentLine = reader.readLine();
                while (currentLine != null) {
                    contents += currentLine;
                    currentLine = reader.readLine();
                }

                System.out.println(contents);

                reader.close();
                connection.disconnect();

                return contents;

            } else {
                // something went wrong?

            }


        } catch (IOException e) {
            e.printStackTrace();
        }

        return null;
    }

    /**
     * loads the trivia object from the json
     *
     * @param json
     * @return
     */
    public static NumberTrivia getTriviaFromJson(String json) {
        Gson gson = new Gson();
        return gson.fromJson(json, NumberTrivia.class);
    }

    /**
     * Refactoring from class!
     * <p>
     * (Remember, don't copy:  Write your own code!  Learn how it works!)
     *
     * @param url
     * @return
     * @throws IOException
     */
    public static String getJsonFromApiBetter(URL url) throws IOException {

        // The url is an HttpUrl, so it returns an HttpURLConnection
        HttpURLConnection connection = (HttpURLConnection) url.openConnection();

        try {
            // the GET method (same as a web browser would use)
            connection.setRequestMethod("GET");

            // some api's require things like a user-agent to work
            connection.setRequestProperty("User-Agent", "PostmanRuntime/7.11.0");

            // if an api has a token, will often be added to the Authorization header
            connection.setRequestProperty("Authorization", "Token token=\"68862dd9d01b9a468e77cc8fab4895da\"");

            // at this point, gets the response from the server
            int status = connection.getResponseCode();

            // 200 = all good
            if (status == 200) {
                // wrapped in a try () { } so it will .close() when completed
                try (BufferedReader reader = getBufferedReaderFromConnection(connection)) {
                    // directly returning the results from the read function
                    return readDataFromBufferedReader(reader);
                }
            } else {
                // something went wrong?
                System.out.println("It exploded:" + status);

                // we can check for null to see if everything is fine
                return null;
            }

        } finally {
            // make sure we disconnect even in case of error
            // but putting it in a "finally"
            // note:  there's not "catch"! so errors will bubble up
            connection.disconnect();
        }
    }

    /**
     * Gets a buffered reader from a connection
     *
     * @param connection
     * @return
     * @throws IOException
     */
    public static BufferedReader getBufferedReaderFromConnection(HttpURLConnection connection) throws IOException {

        // this is messy, so we tossed it in a function to hide it!
        // this makes it easier to read up in the main function
        InputStream inputStream = connection.getInputStream();
        InputStreamReader inputStreamReader = new InputStreamReader(inputStream);
        BufferedReader reader = new BufferedReader(inputStreamReader);
        return reader;
    }

    /**
     * Takes a buffered reader and returns a string of the contents.
     * <p>
     * Uses StringBuilder to avoid allocating more memory (strings)
     *
     * @param reader
     * @return
     * @throws IOException
     */
    public static String readDataFromBufferedReader(BufferedReader reader) throws IOException {
        StringBuilder builder = new StringBuilder();
        String currentLine = reader.readLine();
        while (currentLine != null) {
            builder.append(currentLine);
            currentLine = reader.readLine();
        }
        return builder.toString();
    }
}
