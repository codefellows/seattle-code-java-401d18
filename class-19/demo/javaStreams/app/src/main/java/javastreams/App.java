/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package javastreams;

import java.util.*;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

import static java.util.stream.Collectors.*;

public class App {
  public static List<Java401Person> setup() {
    List<Java401Person> java401People = new ArrayList<>();
    java401People.add(new Java401Person("Chao", 2, "painting", false, true));
    java401People.add(new Java401Person("Aaron", 2, "basketball", true, true));
    java401People.add(new Java401Person("Wasim", 0, "code challenges", false, true));
    java401People.add(new Java401Person("Jennifer", 0, "watching movies", true, true));
    java401People.add(new Java401Person("Dylan", 3, "bike touring", false, true));
    java401People.add(new Java401Person("Rey", 2, "code challenges", true, true));

    return java401People;
  }
    public static void main(String[] args) {
        List<Java401Person> people = setup();

      // ***** TEST CASE 1 *****

      System.out.println("Test Case 1 Imperative: Print the first 10 numbers");
      for(int i = 1; i <= 10; i++) {
        System.out.println(i);
      }

      System.out.println("Test Case 1 Functional:");
      // Streams need a source, and a terminal operation
      // Using .boxed to convert primitive int to Integer
      List<Integer> numbers1To10 = IntStream.range(1, 11).boxed().collect(toList());
      for(Integer number : numbers1To10) {
        System.out.println(number);
      }

      // ***** TEST CASE 2 *****

      System.out.println("Test Case 2 I(mperative): Print the last 5 numbers (from 1-10)");
      int[] numbersFrom1To10Array = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
      for(int i = 0; i < 10; i++) {
        if (i > 4) {
          System.out.println(numbersFrom1To10Array[i]);
        }
      }

      System.out.println("Test Case 2 F(unctional):");
      //                                  Source op       Intermediate ops     Terminal op
      List<Integer> numbers6To10 = IntStream.range(1, 11).boxed().skip(5).collect(toList());
      for (Integer number : numbers6To10) {
        System.out.println(number);
      }

      // ***** TEST CASE 3 *****

      System.out.println("Test Case 3 I: Print the first 5 numbers (starting with 1)");
      for(int i = 0; i < 10; i++) {
        if(i <= 4) {
          System.out.println(numbersFrom1To10Array[i]);
        }
      }

      System.out.println("Test Case 3 F:");
      List<Integer> numbersFrom1To5 = IntStream.range(1, 11).boxed().limit(5).collect(toList());
      for(Integer number : numbersFrom1To5) {
        System.out.println(number);
      }

      // ***** TEST CASE 4 *****

      System.out.println("Test Case 4 I: Print the number of people in our class");
      System.out.println(people.size());

      System.out.println("Test Case 4 F:");
      //                   Source op     Terminal op
      long countPeople = people.stream().count();
      // also -> long countPeople = people.stream().collect(counting());
      System.out.println(countPeople);

      // ***** TEST CASE 5 *****

      System.out.println("Test Case 5 I: Print out if anyone is tired");
      boolean isAnyoneTired = false;
      for(Java401Person person : people) {
        if(person.isTired == true) {
          System.out.println("Someone if tired!");
          isAnyoneTired = true;
          break;
        }
      }
      if(isAnyoneTired == false) {
        System.out.println("No one is tired");
      }

      System.out.println("Test Case 5 F:");
      /// Method 1: filter() + findAny()
      // findFirst() can be used in place of findAny() for this particular problem
      //                              Source op            Intermediate op                   Terminal ops
      Java401Person tiredPerson = people.stream().filter(s -> s.isTired == true).findAny().orElse(null);
      if(tiredPerson != null)
        System.out.println("Someone if tired!");
      else
        System.out.println("No one is tired!");


      // Method 2: anyMatch()
      boolean isAnyoneTiredFuncitonal = people.stream().anyMatch(s -> s.isTired == true);
      if(isAnyoneTiredFuncitonal)
        System.out.println("Someone if tired!");
      else
        System.out.println("No one is tired!");


      // ***** TEST CASE 6 *****

      System.out.println("Test Case 6 I: Print out if everyone is smart");
      boolean isEveryoneSmartImperative = true;
      for(Java401Person person : people) {
        if(person.isSmart == false) {
          System.out.println("Someone is not smart");
          isEveryoneSmartImperative = false;
          break;
        }
      }
      if(isEveryoneSmartImperative == true) {
        System.out.println("Everyone is smart!");
      }

      System.out.println("Test Case 6 F:");
      boolean isEveryoneSmartFunctional = people.stream().allMatch(s -> s.isSmart == true);
      if(isEveryoneSmartFunctional)
        System.out.println("Everyone is smart!");
      else
        System.out.println("Someone is not smart!");

      // equivalent version
      isEveryoneSmartFunctional = people.stream().noneMatch(s -> s.isSmart == false);
      if(isEveryoneSmartFunctional)
        System.out.println("Everyone is smart!");
      else
        System.out.println("Someone is not smart!");

      // ***** TEST CASE 7 *****

      System.out.println("Test Case 7 I: Print out the sum of all our pet numbers, and print the average");
      double averageNumberOfPets = 0.0;
      int totalNumberOfPets = 0;

      for(Java401Person person : people) {
        averageNumberOfPets += person.numOfPets;
        totalNumberOfPets += person.numOfPets;
      }
      averageNumberOfPets /= people.size();

      System.out.println("Average number of pets is: " + averageNumberOfPets);
      System.out.println("Total number of pets is: " + totalNumberOfPets);

      System.out.println("Test Case 7 F:");
      double averageNumberOfPetsFunctional = people.stream().collect(averagingDouble(s -> s.numOfPets));
      int totalNumberOfPetsFunctional = people.stream().collect(summingInt(s -> s.numOfPets));
      System.out.println("Average number of pets: " + averageNumberOfPetsFunctional);
      System.out.println("Total number of pets: " + totalNumberOfPetsFunctional);

      // ***** TEST CASE 8 *****

      System.out.println("Test Case 8 I: Print how many people are tired, and not tired");
      List<Java401Person> tiredPeople = new ArrayList<>();
      List<Java401Person> notTiredPeople = new ArrayList<>();
      for(Java401Person person : people) {
        if(person.isTired == true) {
          tiredPeople.add(person);
        } else {
          notTiredPeople.add(person);
        }
      }
      System.out.println("Tired people: " + tiredPeople.size());
      System.out.println("Not tired people: " + notTiredPeople.size());

      System.out.println("Test Case 8 F:");
      Map<Boolean, Long> tiredPeopleMap = people.stream().collect(groupingBy(s -> s.isTired, counting()));
      System.out.println("Tired People Map: " + tiredPeopleMap);

      // ***** TEST CASE 9 *****

      System.out.println("Test Case 9 I: Print out all our names in sorted alphabetical order (ascending)");
      System.out.println("People before sorting: " + people);
      List<Java401Person> sortedPeople = new ArrayList<>(people);
      Collections.sort(sortedPeople);
      System.out.println("People after sorting: " + sortedPeople);

      System.out.println("Test Case 9 F:");
      //                                     people stream -> name stream  -> sorted name stream -> list to return
      List<String> sortedPeopleFunctional = people.stream().map(s -> s.name).sorted().collect(toList());
      System.out.println("People after sorting: " + sortedPeopleFunctional);

      // ***** TEST CASE 10 *****

      System.out.println("Test Case 10 I: Print out all our names, separated by semicolons");
      String allPeopleSeparatedBySemicolons = "";
      for (Java401Person person : people)
      {
        allPeopleSeparatedBySemicolons += person.name + ";";
      }
      System.out.println("All people: " + allPeopleSeparatedBySemicolons);

      System.out.println("Test Case 10 F:");
      String allPeopleSeparatedBySemicolonsFunctional = people.stream().map(Java401Person::getName).collect(joining(
        ";"));
      System.out.println("All people " + allPeopleSeparatedBySemicolonsFunctional);

      // ***** TEST CASE 11 *****

      System.out.println("Test Case 11 I: Print out all our distinct hobbies");
      Map<String, String> hobbyMap = new HashMap<>();
      for (Java401Person person : people)
      {
        hobbyMap.putIfAbsent(person.hobby, "wheeee");
      }
      System.out.println("Unique hobbies " + hobbyMap);

      System.out.println("Test Case 11 F:");
      List<String> uniqueHobbiesFunctional = people.stream().map(s -> s.hobby).distinct().collect(toList());
      System.out.println("Unique hobbies: " + uniqueHobbiesFunctional);
    }
}
