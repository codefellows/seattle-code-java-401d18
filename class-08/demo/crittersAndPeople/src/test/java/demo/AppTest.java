/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package demo;

import org.junit.Test;

import static org.junit.Assert.*;

public class AppTest {
    @Test
    public void testMakesAMessThrows1() {

        // we can track if the catch happened
        boolean didCatch = false;

        try {
            App.makesAMess();

            // any lines after the throw won't happen
            System.out.println("Won't happen");

        } catch (Exception e) {
            // and the catch block will only happen
            // if an exception was thrown and caught!
            didCatch = true;
        }

        // we check "didCatch" happen?
        // note:  The compiler will even tell you that this can't happen.
        assertTrue(didCatch);
    }

    @Test
    public void testMakesAMessThrows2() {

        try {
            App.makesAMess();

            // Fail instantly causes a test fail
            // since this would only happen if makesAMess()
            // _didn't_ throw, then we would call that a failure scenario
            fail();

        } catch (Exception e) {

            // we can check that the message matches in the catch block too!
            assertEquals("AHHHHHHH!", e.getMessage());
        }
    }

    @Test
    public void testMakesAMessThrows3() {
        // this test just combines both strategies.
        // for the paranoid tester.

        boolean didCatch = false;

        try {
            App.makesAMess();
            fail();
        } catch (Exception e) {
            didCatch = true;
            assertEquals("AHHHHHHH!", e.getMessage());
        }

        assertTrue(didCatch);
    }
}
